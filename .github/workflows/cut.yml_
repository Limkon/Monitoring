name: Visit URLs+UP

on:
  schedule:
  - cron: '0 */7 * * 1'   #工作日 上午8:00 - 下午4:00
  - cron: '5 */4 * * 2'  #工作日 下午4:00 - 晚上8:00
  - cron: '6 */4 * * 3' #工作日 晚上8:00 - 次日凌晨5:00
  - cron: '3 */5 * * 4' #工作日 次日凌晨5:00 - 次日上午8:00
  - cron: '2 */3 * * 5'   #星期五 晚上10:00 - 次日凌晨5:00
  - cron: '15 */7 * * 0,6'     #休息日 全天候
  workflow_dispatch:

jobs:
  visit-urls:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y coreutils curl
          
      - name: Visit URLs
        run: |
          set -e
          # Read the URL list from urls.txt file
          urls=($(cat urls))

          # Loop through the URL list and visit each URL
          for url in "${urls[@]}"
          do
            # Randomly generate a delay time between 1 to 2 minutes
            delay=$(( RANDOM % 120 + 60 ))

            # Send an HTTP request and save the response result
            response=$(timeout 30s curl -sf -v "$url")
            
            # Check the exit code of curl command
            if [ "${PIPESTATUS[0]}" -eq 0 ]; then
              echo "$url : Success"
            else
              echo "$url : Failed"
              echo "URL ${url} failed to visit" >> README.md
            fi

            # Wait for the randomly generated delay time before visiting the next URL
            sleep "$delay"
          done

      - name: Check URLs and Update README
        run: |
          # Read the URL list from urls.txt file
          urls=($(cat urls))

          # Loop through the URL list and visit each URL, save the response result to an array variable
          declare -a responses=()
          for url in "${urls[@]}"
          do
            response=$(timeout 30s curl -sf -v "$url")
            if [ "${PIPESTATUS[0]}" -eq 0 ]; then
              responses+=("$url : Success")
            else
              responses+=("$url : Failed")
              echo "URL ${url} failed to visit" >> README.md
            fi
          done

          # Write the response result to status.md file
          echo "## Website Status" > status.md
          printf '%s\n' "${responses[@]}" >> status.md
          cat README.md | sed '/## Website Status/,$d' > new-readme.md
          cat status.md >> new-readme.md
          mv new-readme.md README.md

          # Push the changes to the remote repository
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add README.md
          git commit -m "Update website status"
          git push origin ${{ github.ref }}
