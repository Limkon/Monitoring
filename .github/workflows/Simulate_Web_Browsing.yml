name: Simulate Browsing

on:
  schedule:
    - cron: "0 */10 * * *"  # 每 10 小时运行一次
  workflow_dispatch:

jobs:
  simulate_browsing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium requests jinja2

      - name: Check available disk space
        run: df -h

      - name: Cache Chrome and ChromeDriver
        id: cache-chrome
        uses: actions/cache@v3
        with:
          path: |
            ./chrome/opt/google/chrome
            ./chrome/chromedriver
          key: chrome-chromedriver-${{ runner.os }}-chrome-134
          restore-keys: |
            chrome-chromedriver-${{ runner.os }}-

      - name: Install Chrome and ChromeDriver (if not cached)
        if: steps.cache-chrome.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./chrome/opt/google/chrome ./chrome/chromedriver
          wget -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get -f install -y
          rm -f google-chrome.deb
          google-chrome --version
          cp -r /opt/google/chrome/* ./chrome/opt/google/chrome/
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION" | cut -d'.' -f1)
          echo "Chrome Version: $CHROME_VERSION"
          DRIVER_VERSION=$(curl -sS "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_MAJOR_VERSION")
          if echo "$DRIVER_VERSION" | grep -q "404" || [ -z "$DRIVER_VERSION" ]; then
            echo "No ChromeDriver found for Chrome $CHROME_MAJOR_VERSION in Chrome for Testing, falling back to recent versions."
            for i in $(seq $((CHROME_MAJOR_VERSION - 1)) -1 125); do
              DRIVER_VERSION=$(curl -sS "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$i")
              if ! echo "$DRIVER_VERSION" | grep -q "404" && [ -n "$DRIVER_VERSION" ] && echo "$DRIVER_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
                echo "Found compatible version: $DRIVER_VERSION"
                break
              fi
              if [ "$i" -eq 125 ]; then
                echo "No compatible ChromeDriver found from $CHROME_MAJOR_VERSION to 125, using fallback version 133.0.6788.123."
                DRIVER_VERSION="133.0.6788.123"
              fi
            done
          fi
          echo "Matching ChromeDriver Version: $DRIVER_VERSION"
          wget -q -O chromedriver_linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/$DRIVER_VERSION/linux64/chromedriver-linux64.zip" || {
            echo "❌ Failed to download ChromeDriver for version $DRIVER_VERSION from Chrome for Testing. Trying legacy source..."
            wget -q -O chromedriver_linux64.zip "https://chromedriver.storage.googleapis.com/$DRIVER_VERSION/chromedriver_linux64.zip" || {
              echo "❌ Failed to download ChromeDriver for version $DRIVER_VERSION from both sources. Aborting."
              exit 1
            }
          }
          unzip -t chromedriver_linux64.zip || {
            echo "❌ ZIP file is corrupted! Aborting."
            rm -f chromedriver_linux64.zip
            exit 1
          }
          unzip -o chromedriver_linux64.zip
          mv chromedriver-linux64/chromedriver ./chrome/chromedriver/
          chmod +x ./chrome/chromedriver/chromedriver
          rm -rf chromedriver_linux64.zip chromedriver-linux64
          ./chrome/chromedriver/chromedriver --version

      - name: Verify Chrome and ChromeDriver
        run: |
          ./chrome/opt/google/chrome/google-chrome --version || echo "Chrome not found"
          ./chrome/chromedriver/chromedriver --version || echo "ChromeDriver not found"

      - name: Run simulate_browsing script
        env:
          FILENAME: "infinity"
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1200x24 > /dev/null 2>&1 &
          export PATH=$PATH:$(pwd)/chrome/opt/google/chrome:$(pwd)/chrome/chromedriver
          python ./tools/simulate_browsing.py $FILENAME

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Ensure .gitignore exists
        run: |
          echo "google-chrome.deb" >> .gitignore
          echo "chromedriver_linux64.zip" >> .gitignore
          echo "*.deb" >> .gitignore
          echo "*.zip" >> .gitignore
          echo "chrome/" >> .gitignore

      - name: Commit and push changes
        run: |
          # 禁用 set -e，确保所有命令执行
          set +e
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch is: $BRANCH"
          echo "Git status before staging:"
          git status
          # 暂存所有修改文件
          git add README.md webs urls infinity .gitignore
          echo "Git status after staging:"
          git status
          # 提交更改
          if ! git diff-index --quiet HEAD --cached; then
            git commit -m "Update files from simulate_browsing"
            echo "Changes committed"
          else
            echo "No changes to commit"
          fi
          # 拉取并推送
          git pull origin "$BRANCH" --rebase || echo "Pull failed, continuing"
          git push origin "$BRANCH" || echo "Push failed, continuing"
        continue-on-error: true

      - name: Clean up large files
        run: |
          find . -size +50M -delete
