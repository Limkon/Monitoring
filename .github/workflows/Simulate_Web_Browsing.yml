name: simulate browsing

on:
  schedule:
    - cron: '0 */22 * * *'  # 每22小时运行一次
  workflow_dispatch:

jobs:
  simulate_browsing:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install selenium requests jinja2

    - name: Download and install Chrome
      run: |
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo dpkg -i google-chrome-stable_current_amd64.deb
        sudo apt-get -f install -y

    - name: Install ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
        CHROMEDRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%.*}")
        wget "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver

    - name: Run simulate_browsing script
      run: |
        python ./tools/simulate_browsing.py urls

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Ensure .gitignore exists and ignores large files
      run: |
        echo "google-chrome-stable_current_amd64.deb" >> .gitignore
        echo "chromedriver_linux64.zip" >> .gitignore
        echo "*.deb" >> .gitignore
        echo "*.zip" >> .gitignore

    - name: Commit and push changes
      continue-on-error: true
      run: |
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echo "Current branch is: $BRANCH"
        git add README.md
        git diff-index --quiet HEAD || git commit -m "Update README.md" -q
        git stash --include-untracked
        git pull origin "$BRANCH" --rebase
        git stash pop || echo "No stashed changes to apply"
        git push origin "$BRANCH"
      shell: /usr/bin/bash -e {0}
      env:
        pythonLocation: /opt/hostedtoolcache/Python/3.13.2/x64
        PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.2/x64/lib/pkgconfig
        Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.2/x64
        Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.2/x64
        Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.2/x64
        LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.2/x64/lib

    - name: Clean up large files
      run: |
        find . -size +50M -delete
