name: Simulate Browsing

on:
  schedule:
    - cron: "0 */23 * * *"  # 每 23 小时运行一次
  workflow_dispatch:

jobs:
  simulate_browsing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium requests jinja2

      - name: Check available disk space
        run: df -h

      - name: Download and install Chrome
        run: |
          wget -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get -f install -y
          rm -f google-chrome.deb
          google-chrome --version

      - name: Install ChromeDriver (Auto-matching Chrome version)
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION" | cut -d'.' -f1)
          echo "Chrome Version: $CHROME_VERSION"
          DRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR_VERSION")
          if echo "$DRIVER_VERSION" | grep -q "NoSuchKey"; then
            echo "No ChromeDriver found for Chrome $CHROME_MAJOR_VERSION, falling back to latest version."
            DRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
          fi
          if echo "$DRIVER_VERSION" | grep -q "NoSuchKey" || [ -z "$DRIVER_VERSION" ]; then
            echo "Latest ChromeDriver not available, trying previous major version."
            PREV_MAJOR_VERSION=$((CHROME_MAJOR_VERSION - 1))
            DRIVER_VERSION=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$PREV_MAJOR_VERSION")
          fi
          echo "Matching ChromeDriver Version: $DRIVER_VERSION"
          wget -q -O chromedriver_linux64.zip "https://chromedriver.storage.googleapis.com/$DRIVER_VERSION/chromedriver_linux64.zip" || {
            echo "❌ Failed to download ChromeDriver for version $DRIVER_VERSION. Aborting."
            exit 1
          }
          unzip -t chromedriver_linux64.zip || (echo "❌ ZIP file is corrupted!" && rm -f chromedriver_linux64.zip && exit 1)
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          rm -f chromedriver_linux64.zip
          chromedriver --version

      - name: Run scripts
        run: |
          python ./tools/script.py urls
          python ./tools/bludweb.py webs 150
          python ./tools/remove_duplicates.py urls
          python ./tools/fetch_urls.py urls

      - name: Execute auto_login_and_execute.sh
        run: |
          chmod +x ./tools/auto_login_and_execute.sh
          ./tools/auto_login_and_execute.sh

      - name: Cut web
        run: |
          chmod +x ./tools/cut.sh
          ./tools/cut.sh

      - name: Run simulate_browsing script
        env:
          FILENAME: "urls"
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          python ./tools/simulate_browsing.py $FILENAME

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Ensure .gitignore exists
        run: |
          echo "google-chrome.deb" >> .gitignore
          echo "chromedriver_linux64.zip" >> .gitignore
          echo "*.deb" >> .gitignore
          echo "*.zip" >> .gitignore

      - name: Commit and push changes
        continue-on-error: true
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch is: $BRANCH"
          git add README.md webs urls
          git diff-index --quiet HEAD || git commit -m "Update README.md, webs, and urls" -q
          git stash --include-untracked
          git pull origin "$BRANCH" --
