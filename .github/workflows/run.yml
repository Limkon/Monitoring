name: Visit URLsUp

on:
  schedule:
    - cron: '0 */7 * * 1-5' # 工作日 上午8:00 - 下午5:59
    - cron: '5 18-23/5 * * 1-5' # 工作日 晚上6点 - 次日凌晨5:59
    - cron: '6 */10 * * 3' # 工作日 次日凌晨6:00 - 上午7:59
    - cron: '30 */5 * * 4' # 工作日 上午8:00 - 次日凌晨5:00
    - cron: '2 */3 * * 5'   # 星期五 晚上10:00 - 次日凌晨5:00
    - cron: '15 */24 * * 0,6'     # 休息日 全天候
  workflow_dispatch:

jobs:
  visit-urls:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Visit URLs
        run: |
          set -e
          urls=($(cat urls))

          for url in "${urls[@]}"; do
            delay=$((RANDOM % 30 + 30))
            count=0
            while true; do
              response=$(timeout 5s curl -sf -o /dev/null -w '%{http_code}' "$url" || true)
              if [[ "$response" =~ ^2 ]]; then
                echo "$url: Success"
                break
              elif [ -z "$response" ]; then
                echo "$url: Failed (no response)"
              else
                echo "$url: Failed ($response)"
              fi

              # 如果网站未响应，则等待5秒后重新尝试
              sleep 5
              ((count++))
              if [ $count -ge 3 ]; then
                echo "$url: Failed (exceeded retries)"
                break
              fi
            done

            sleep "$delay"
          done || true

      - name: Check URLs and Update README
        run: |
          urls=($(cat urls))

          old_status_file="old-status.md"
          new_status_file="new-status.md"

          # 计算旧状态的哈希值
          if [ -f "$old_status_file" ]; then
            old_md5=$(md5sum "$old_status_file" | awk '{print $1}')
          else
            old_md5=""
          fi

          declare -a responses=()
          for url in "${urls[@]}"; do
            response=$(timeout 5s curl -sf -o /dev/null -w '%{http_code}' "$url" || true)
            if [[ "$response" =~ ^2 ]]; then
              responses+=("$url: Success")
            elif [ -z "$response" ]; then
              responses+=("$url: Failed (no response)")
              echo "URL ${url} failed to visit (no response)" >> "$new_status_file"
            else
              responses+=("$url: Failed ($response)")
              echo "URL ${url} failed to visit ($response)" >> "$new_status_file"
            fi
          done

          new_md5=$(md5sum "$new_status_file" | awk '{print $1}')
          if [ "$old_md5" != "$new_md5" ]; then
            echo "Website status has changed. Updating README.md." >&2
            echo "## Website Status" > "$new_status_file"
            printf '%s\n' "${responses[@]}" >> "$new_status_file"
            cat README.md | sed '/## Website Status/,$d' > new-readme.md
            cat "$new_status_file" >> new-readme.md
            mv new-readme.md README.md

            git config --global user.name "${{ github.actor }}"
            git config --global user.email "${{ github.actor }}@users.noreply.github.com"
            git add README.md
            git commit -m "Update website status"
            git push origin ${{ github.ref }}

            # 保存新状态以备将来使用
            cp "$new_status_file" "$old_status_file"
          else
            echo "No changes to website"
          fi
