name: Monitor Websites

on:
  workflow_dispatch:  # 手動觸發
  schedule:
    - cron: "*/10 * * * *"  # 每 10 分鐘運行一次

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-requests
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-pip-
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests # 直接安裝 requests 函式庫

      - name: Run website monitoring script
        run: |
          # Python 腳本在 tools/ 目錄下，URL 列表檔案在根目錄
          python tools/monitor_websites.py urls

      - name: Commit and push updates
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 添加 README.md (根目錄) 和 urls.txt (根目錄)
          git add README.md urls 
          
          # 檢查是否有暫存的更改
          if ! git diff --cached --quiet; then
            echo "偵測到變更，正在提交..."
            git commit -m "更新網站狀態和 URL"
          else
            echo "沒有需要提交的變更。"
          fi

          # 獲取當前分支名稱
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "目前分支是 $BRANCH"

          # 拉取最新程式碼並嘗試自動解決衝突
          MAX_PULL_RETRIES=3
          PULL_RETRY_COUNT=0
          PULL_SUCCESSFUL=false
          while [ $PULL_RETRY_COUNT -lt $MAX_PULL_RETRIES ]; do
            echo "嘗試從 origin $BRANCH 拉取 (嘗試 $((PULL_RETRY_COUNT+1))/$MAX_PULL_RETRIES)..."
            if git pull origin "$BRANCH" --rebase; then
              PULL_SUCCESSFUL=true
              echo "使用 rebase 拉取成功。"
              break
            else
              echo "Rebase 失敗。正在重置並嘗試不使用 rebase 的拉取 (合併策略)..."
              if git rebase --abort; then # 如果 rebase 過程中斷，先中止
                echo "Rebase 已中止。"
              fi
              if git pull origin "$BRANCH"; then # 嘗試普通合併
                PULL_SUCCESSFUL=true
                echo "使用合併拉取成功。"
                break
              else
                echo "使用合併拉取也失敗了。"
                PULL_RETRY_COUNT=$((PULL_RETRY_COUNT+1))
                sleep 5 
              fi
            fi
          done

          if [ "$PULL_SUCCESSFUL" = false ]; then
            echo "⚠️ 在 $MAX_PULL_RETRIES 次嘗試後無法從 origin 拉取。跳過推送以避免資料遺失。"
          else
            # 檢查是否有合併衝突
            if git diff --name-only --diff-filter=U | grep -q '.'; then
              echo "⚠️ 拉取後偵測到合併衝突。"
              echo "嘗試透過採用本地變更來解決 README.md 和 urls.txt 的衝突..."
              git checkout --ours README.md
              git checkout --ours urls.txt # urls.txt 在根目錄
              git add README.md urls.txt
              git commit -m "Chore: 自動解決衝突 (採用本地變更)"
              echo "已透過採用本地變更解決衝突。"
            fi
            
            # 再次檢查是否有未提交的更改（例如衝突解決後）
            if ! git diff --cached --quiet; then
               echo "正在提交已解決的衝突..."
               git commit -m "更新網站狀態和 URL (衝突解決後)"
            fi

            echo "嘗試推送到 origin $BRANCH..."
            MAX_PUSH_RETRIES=3
            PUSH_RETRY_COUNT=0
            PUSH_SUCCESSFUL=false
            while [ $PUSH_RETRY_COUNT -lt $MAX_PUSH_RETRIES ]; do
                if git push origin "$BRANCH"; then
                    PUSH_SUCCESSFUL=true
                    echo "推送成功。"
                    break
                else
                    echo "⚠️ 推送失敗 (嘗試 $((PUSH_RETRY_COUNT+1))/$MAX_PUSH_RETRIES)。將在 10 秒後重試..."
                    PUSH_RETRY_COUNT=$((PUSH_RETRY_COUNT+1))
                    sleep 10
                    echo "在重試推送前再次拉取..."
                    git pull origin "$BRANCH" --rebase || git pull origin "$BRANCH"
                fi
            done

            if [ "$PUSH_SUCCESSFUL" = false ]; then
                echo "❌ 在 $MAX_PUSH_RETRIES 次嘗試後推送失敗。請考慮手動介入或必要時強制推送。"
            fi
          fi
